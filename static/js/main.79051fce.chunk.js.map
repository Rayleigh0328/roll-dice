{"version":3,"sources":["logo.svg","components/dice/dice.component.jsx","components/roll-dice/roll-dice.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dice","props","className","this","isRolling","spellOut","face","Component","RollDice","generateRandomInt","ub","Math","floor","random","generateRandomArray","len","result","length","push","roll","e","setState","dices","numberOfDice","setTimeout","animationDuration","state","buttonText","buttonClass","map","v","i","key","onClick","disabled","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8KCGrCC,G,wDAIJ,WAAYC,GAAO,uCACXA,G,qDAIN,OACE,yBAAKC,UAAWC,KAAKF,MAAMG,UAAU,UAAU,MAAM,uBAAGF,UAAS,2BAAsBF,EAAKK,SAASF,KAAKF,MAAMK,c,GAVnGC,cAAbP,EAEGK,SAAW,CAAC,OAAQ,MAAO,MAAO,QAAS,OAAQ,OAAQ,O,UCD9DG,E,kDAOJ,WAAYP,GAAO,IAAD,8BAChB,cAAMA,IAQRQ,kBAAoB,SAACC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAAM,GAVxB,EAalBI,oBAAsB,SAACC,GAErB,IADA,IAAIC,EAAS,GACNA,EAAOC,OAASF,GACrBC,EAAOE,KAAK,EAAKT,kBAAkB,IAErC,OAAOO,GAlBS,EAqBlBG,KAAO,SAACC,GACN,EAAKC,SAAS,CACZC,MAAQ,EAAKR,oBAAoB,EAAKb,MAAMsB,cAC5CnB,WAAY,IAEdoB,YACE,kBAAM,EAAKH,SAAS,CAACjB,WAAY,MACjC,EAAKH,MAAMwB,oBAzBb,EAAKC,MAAO,CACVJ,MAAQ,EAAKR,oBAAoB,EAAKb,MAAMsB,cAC5CnB,WAAY,GALE,E,qDAgCT,IAAD,OACFuB,EAAcxB,KAAKuB,MAAMtB,UAAY,aAAe,gBACpDwB,EAAezB,KAAKuB,MAAMtB,UAAW,mBAAmB,mBAC5D,OACE,yBAAKF,UAAU,YACb,yBAAKA,UAAU,iBACdC,KAAKuB,MAAMJ,MAAMO,KAAK,SAACC,EAAEC,GAAH,OACrB,kBAAC,EAAD,CACEC,IAAKD,EACLzB,KAAMwB,EACNL,kBAAmB,EAAKxB,MAAMwB,kBAC9BrB,UAAW,EAAKsB,MAAMtB,gBAI1B,4BACE6B,QAAS9B,KAAKgB,KACdjB,UAAS,mBAAgB0B,GACzBM,SAAY/B,KAAKuB,MAAMtB,WAEtBuB,Q,GA3DYpB,aAAjBC,EAEG2B,aAAe,CACpBZ,aAAe,EACfE,kBAAmB,KCKRW,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,CAAUqB,aAAa,IAAIE,kBAAkB,WCI/BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79051fce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{ Component } from 'react';\nimport \"./dice.styles.css\";\n\nclass Dice extends Component {\n\n  static spellOut = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return (\n      <div className={this.props.isRolling?\"shaking\":null}><i className={`Dice fas fa-dice-${Dice.spellOut[this.props.face]}`}></i></div>\n    )\n  }\n}\n\nexport { Dice };","import React, { Component } from 'react';\nimport {Dice} from '../dice/dice.component';\nimport \"./roll-dice.styles.css\";\n\nclass RollDice extends Component{\n\n  static defaultProps = {\n    numberOfDice : 2, \n    animationDuration: 1000, \n  }\n\n  constructor(props){\n    super(props);\n\n    this.state= {\n      dices : this.generateRandomArray(this.props.numberOfDice),\n      isRolling : false,\n    };\n  }\n\n  generateRandomInt = (ub) => {\n    return Math.floor(Math.random() * ub) + 1;\n  }\n\n  generateRandomArray = (len) => {\n    var result = [];\n    while (result.length < len){\n      result.push(this.generateRandomInt(6));\n    }\n    return result;\n  }\n\n  roll = (e) => {\n    this.setState({\n      dices : this.generateRandomArray(this.props.numberOfDice),\n      isRolling : true\n    });\n    setTimeout(\n      () => this.setState({isRolling : false}), \n      this.props.animationDuration\n    );\n  }\n\n  render(){\n    let buttonText = (this.state.isRolling ? \"Rolling...\" : \"click to roll\");\n    let buttonClass = (this.state.isRolling? \"RollDice-rolling\":\"RollDice-to-roll\");\n    return (\n      <div className=\"RollDice\">\n        <div className=\"DiceContainer\">\n        {this.state.dices.map( (v,i) => \n          <Dice \n            key={i} \n            face={v} \n            animationDuration={this.props.animationDuration}\n            isRolling={this.state.isRolling}\n          />\n        )}\n        </div> \n        <button \n          onClick={this.roll} \n          className = {`RollDice ${buttonClass}`}\n          disabled = {this.state.isRolling}\n        >\n          {buttonText}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport { RollDice };\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { RollDice } from './components/roll-dice/roll-dice.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice numberOfDice='2' animationDuration='2000'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}